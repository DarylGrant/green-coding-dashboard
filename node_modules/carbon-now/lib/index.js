"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Carbon = void 0;
var puppeteer_1 = __importDefault(require("puppeteer"));
var fs_extra_1 = __importDefault(require("fs-extra"));
var path_1 = __importDefault(require("path"));
var Carbon = /** @class */ (function () {
    function Carbon(options) {
        this.options = {
            lang: 'auto',
            background: 'rgba(171, 184, 195, 1)',
            theme: 'dracula',
            font: 'Hack',
            windowControls: true,
            widthAdjustment: true,
            lineNumbers: false,
            firstLineNumber: 1,
            watermark: false,
            fontSize: 18,
            lineHeight: 169,
            exportSize: 2,
        };
        // Check if the options are valid
        this.checkOptions(options);
        this.options = __assign(__assign({}, this.options), options);
    }
    Carbon.prototype.generate = function (code, outputFilePath) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var fontParam, parameter, url;
            return __generator(this, function (_b) {
                fontParam = (_a = this.options.font) === null || _a === void 0 ? void 0 : _a.replace('-', ' ');
                parameter = {
                    code: code,
                    l: this.options.lang,
                    bg: this.options.background,
                    t: this.options.theme,
                    fm: fontParam,
                    wc: this.options.windowControls,
                    wa: this.options.widthAdjustment,
                    ln: this.options.lineNumbers,
                    fl: this.options.firstLineNumber,
                    wm: this.options.watermark,
                    fs: this.options.fontSize + 'px',
                    ls: this.options.lineHeight,
                    es: this.options.exportSize + 'x',
                };
                url = 'https://carbon.now.sh?' + this.createParameter(parameter);
                return [2 /*return*/, this.download(url, outputFilePath)];
            });
        });
    };
    Carbon.prototype.download = function (url, outputFilePath) {
        return __awaiter(this, void 0, void 0, function () {
            var output, folder, filename, browser, page, downloaded, client;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        output = path_1.default.resolve(outputFilePath);
                        folder = path_1.default.dirname(output);
                        filename = path_1.default.basename(output);
                        if (!path_1.default.extname(filename)) {
                            folder = output;
                            filename = 'Downloaded.png';
                        }
                        return [4 /*yield*/, puppeteer_1.default.launch({
                                args: ['--no-sandbox', '--disable-setuid-sandbox'],
                                headless: 'new',
                            })];
                    case 1:
                        browser = _a.sent();
                        return [4 /*yield*/, browser.newPage()];
                    case 2:
                        page = _a.sent();
                        return [4 /*yield*/, page.goto(url)];
                    case 3:
                        _a.sent();
                        // Make Downloaded file more HD
                        return [4 /*yield*/, page.setViewport({
                                width: 1920,
                                height: 1080,
                            })];
                    case 4:
                        // Make Downloaded file more HD
                        _a.sent();
                        downloaded = null;
                        return [4 /*yield*/, page.target().createCDPSession()];
                    case 5:
                        client = _a.sent();
                        return [4 /*yield*/, client.send('Browser.setDownloadBehavior', {
                                behavior: 'allowAndName',
                                downloadPath: folder,
                                eventsEnabled: true,
                            })];
                    case 6:
                        _a.sent();
                        client.on('Browser.downloadProgress', function (event) { return __awaiter(_this, void 0, void 0, function () {
                            var newfilename;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!(event.state === 'completed')) return [3 /*break*/, 2];
                                        newfilename = path_1.default.resolve(folder, filename);
                                        fs_extra_1.default.renameSync(path_1.default.resolve(folder, event.guid), newfilename);
                                        // Close Browser after Success Download
                                        return [4 /*yield*/, browser.close()];
                                    case 1:
                                        // Close Browser after Success Download
                                        _a.sent();
                                        downloaded = newfilename;
                                        _a.label = 2;
                                    case 2: return [2 /*return*/];
                                }
                            });
                        }); });
                        // Click Export in Carbon.now.sh Site
                        return [4 /*yield*/, page.waitForSelector('.editor')];
                    case 7:
                        // Click Export in Carbon.now.sh Site
                        _a.sent();
                        return [4 /*yield*/, page.waitForSelector('.jsx-2184717013')];
                    case 8:
                        _a.sent();
                        return [4 /*yield*/, page.click('.jsx-2184717013')];
                    case 9:
                        _a.sent();
                        return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                                var checkDownloaded;
                                return __generator(this, function (_a) {
                                    checkDownloaded = setInterval(function () {
                                        if (downloaded !== null) {
                                            clearInterval(checkDownloaded);
                                            resolve(downloaded);
                                        }
                                    }, 100);
                                    return [2 /*return*/];
                                });
                            }); })];
                }
            });
        });
    };
    Carbon.prototype.createParameter = function (obj) {
        var parameter = Object.entries(obj).map(function (_a) {
            var key = _a[0], value = _a[1];
            return "".concat(key, "=").concat(encodeURIComponent(value));
        });
        return parameter.join('&');
    };
    Carbon.prototype.checkOptions = function (options) {
        // Check if the options are valid
        if (options.lang && !this.checkLang(options.lang)) {
            throw new Error("Invalid language: ".concat(options.lang));
        }
        if (options.theme && !this.checkTheme(options.theme)) {
            throw new Error("Invalid theme: ".concat(options.theme));
        }
        if (options.font && !this.checkFont(options.font)) {
            throw new Error("Invalid font: ".concat(options.font));
        }
    };
    Carbon.prototype.checkLang = function (lang) {
        var langs = [
            'auto',
            'c',
            'css',
            'cpp',
            'go',
            'html',
            'java',
            'javascript',
            'jsx',
            'php',
            'python',
            'rust',
            'typescript',
        ];
        return langs.includes(lang);
    };
    Carbon.prototype.checkTheme = function (theme) {
        var themes = [
            'a11y-dark',
            'atom-dark',
            'base16-ateliersulphurpool.light',
            'blackboard',
            'cb',
            'darcula',
            'default',
            'dracula',
            'duotone-dark',
            'duotone-earth',
            'duotone-forest',
            'duotone-light',
            'duotone-sea',
            'duotone-space',
            'ghcolors',
            'hopscotch',
            'material-dark',
            'material-light',
            'material-oceanic',
            'nord',
            'pojoaque',
            'shades-of-purple',
            'synthwave84',
            'vs',
            'vsc-dark-plus',
            'xonokai',
        ];
        return themes.includes(theme);
    };
    Carbon.prototype.checkFont = function (font) {
        var fonts = [
            'MonoLisa',
            'Anonymouse-Pro',
            'Cascadia-Code',
            'Droid-Sans-Mono',
            'Fantasque-Sans-Mono',
            'Fira-Code',
            'Hack',
            'IBM-Flex-Mono',
            'Inconsolata',
            'JetBrains-Mono',
            'Monoid',
            'Source-Code-Pro',
            'Space-Mono',
            'Ubuntu-Mono',
        ];
        return fonts.includes(font);
    };
    return Carbon;
}());
exports.Carbon = Carbon;
